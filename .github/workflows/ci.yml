name: Déploiement sur VPS

on:
  push:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build et Push de l'image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api-bot-discord:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/api-bot-discord:latest
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Copie des fichiers de configuration
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml,src/nginx/"
          target: "/var/www/api-bot-discord"
          strip_components: 0

      - name: Déploiement sur VPS
        uses: appleboy/ssh-action@master
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: POSTGRES_HOST,POSTGRES_PORT,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,REDIS_HOST,REDIS_PORT
          script: |
            # Vérification des prérequis
            if ! command -v docker &> /dev/null; then
                echo "Docker n'est pas installé. Installation..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
            fi

            if ! command -v docker compose &> /dev/null; then
                echo "Docker Compose n'est pas installé. Installation..."
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Création du répertoire si nécessaire
            mkdir -p /var/www/api-bot-discord

            cd /var/www/api-bot-discord
            
            # Création ou mise à jour du fichier .env
            cat > .env << EOL
            # PostgreSQL
            POSTGRES_HOST=$POSTGRES_HOST
            POSTGRES_PORT=$POSTGRES_PORT
            POSTGRES_USER=$POSTGRES_USER
            POSTGRES_PASSWORD=$POSTGRES_PASSWORD
            POSTGRES_DB=$POSTGRES_DB

            # Redis
            REDIS_HOST=$REDIS_HOST
            REDIS_PORT=$REDIS_PORT

            # API
            NODE_ENV=production
            PORT=3000
            EOL

            # Pull des nouvelles images
            docker compose -f docker-compose.prod.yml pull

            # Redémarrage des services
            docker compose -f docker-compose.prod.yml up -d --force-recreate

            # Nettoyage des images non utilisées
            docker image prune -f

            # Vérification du déploiement
            echo "Vérification des services..."
            docker compose -f docker-compose.prod.yml ps
            
            # Affichage des logs en cas d'erreur
            if [ $? -ne 0 ]; then
                echo "Erreur détectée. Affichage des logs..."
                docker compose -f docker-compose.prod.yml logs
                exit 1
            fi
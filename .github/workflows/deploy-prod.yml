name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build et Push de l'image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api-bot-discord:production
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/api-bot-discord:production
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Copie des fichiers de configuration
        uses: appleboy/scp-action@master
        with:
          host: 45.81.84.133
          port: 9033
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml,src/nginx/,.env.production"
          target: "/var/www/api-bot-discord"
          strip_components: 0

      - name: Déploiement sur VPS
        uses: appleboy/ssh-action@master
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        with:
          host: 45.81.84.133
          port: 9033
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Création du répertoire si nécessaire
            mkdir -p /var/www/api-bot-discord
            cd /var/www/api-bot-discord

            # Copie du fichier .env.production vers .env
            cp .env.production .env

            # Pull des nouvelles images
            docker compose -f docker-compose.prod.yml pull

            # Redémarrage des services
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d

            # Nettoyage des images non utilisées
            docker image prune -f

            # Vérification du déploiement
            echo "Vérification des services..."
            docker compose -f docker-compose.prod.yml ps 